// <auto-generated />
using System;
using LogisticsManagementSystem.Infrastructure;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace LogisticsManagementSystem.Infrastructure.Migrations
{
    [DbContext(typeof(AppDbContext))]
    partial class AppDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.1")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("LogisticsManagementSystem.Domain.Company", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("timestamp");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("varchar(256)");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("timestamp");

                    b.HasKey("Id");

                    b.ToTable("Companies", (string)null);
                });

            modelBuilder.Entity("LogisticsManagementSystem.Domain.Menu", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Component")
                        .HasColumnType("varchar(256)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("timestamp");

                    b.Property<string>("Icon")
                        .HasColumnType("varchar(256)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("varchar(256)");

                    b.Property<int?>("ParentId")
                        .HasColumnType("integer");

                    b.Property<string>("Path")
                        .IsRequired()
                        .HasColumnType("varchar(256)");

                    b.Property<int>("Sort")
                        .HasColumnType("integer");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("timestamp");

                    b.Property<bool>("Visibility")
                        .HasColumnType("boolean");

                    b.HasKey("Id");

                    b.ToTable("Menus", (string)null);

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Component = "",
                            CreatedAt = new DateTime(2024, 4, 30, 18, 16, 5, 395, DateTimeKind.Local).AddTicks(9840),
                            Icon = "",
                            Name = "系统",
                            Path = "/admin",
                            Sort = 0,
                            UpdatedAt = new DateTime(2024, 4, 30, 18, 16, 5, 395, DateTimeKind.Local).AddTicks(9840),
                            Visibility = true
                        },
                        new
                        {
                            Id = 2,
                            Component = "./Admin/Users",
                            CreatedAt = new DateTime(2024, 4, 30, 18, 16, 5, 395, DateTimeKind.Local).AddTicks(9850),
                            Icon = "",
                            Name = "员工列表",
                            ParentId = 1,
                            Path = "/admin/users",
                            Sort = 0,
                            UpdatedAt = new DateTime(2024, 4, 30, 18, 16, 5, 395, DateTimeKind.Local).AddTicks(9850),
                            Visibility = true
                        },
                        new
                        {
                            Id = 3,
                            Component = "./Admin/Menus",
                            CreatedAt = new DateTime(2024, 4, 30, 18, 16, 5, 395, DateTimeKind.Local).AddTicks(9850),
                            Icon = "",
                            Name = "菜单管理",
                            ParentId = 1,
                            Path = "/admin/menus",
                            Sort = 0,
                            UpdatedAt = new DateTime(2024, 4, 30, 18, 16, 5, 395, DateTimeKind.Local).AddTicks(9850),
                            Visibility = true
                        },
                        new
                        {
                            Id = 4,
                            Component = "./Admin/Permissions",
                            CreatedAt = new DateTime(2024, 4, 30, 18, 16, 5, 395, DateTimeKind.Local).AddTicks(9850),
                            Icon = "",
                            Name = "权限管理",
                            ParentId = 1,
                            Path = "/admin/permissions",
                            Sort = 0,
                            UpdatedAt = new DateTime(2024, 4, 30, 18, 16, 5, 395, DateTimeKind.Local).AddTicks(9850),
                            Visibility = true
                        },
                        new
                        {
                            Id = 5,
                            Component = "./Admin/Roles",
                            CreatedAt = new DateTime(2024, 4, 30, 18, 16, 5, 395, DateTimeKind.Local).AddTicks(9850),
                            Icon = "",
                            Name = "角色管理",
                            ParentId = 1,
                            Path = "/admin/roles",
                            Sort = 0,
                            UpdatedAt = new DateTime(2024, 4, 30, 18, 16, 5, 395, DateTimeKind.Local).AddTicks(9850),
                            Visibility = true
                        });
                });

            modelBuilder.Entity("LogisticsManagementSystem.Domain.MenuRole", b =>
                {
                    b.Property<int>("MenuId")
                        .HasColumnType("integer");

                    b.Property<Guid>("RoleId")
                        .HasColumnType("uuid");

                    b.HasKey("MenuId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("MenuRole", (string)null);
                });

            modelBuilder.Entity("LogisticsManagementSystem.Domain.Permission", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Action")
                        .HasColumnType("varchar(256)");

                    b.Property<string>("Controller")
                        .HasColumnType("varchar(256)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("timestamp");

                    b.Property<string>("Method")
                        .HasColumnType("varchar(256)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("varchar(256)");

                    b.Property<int?>("ParentId")
                        .HasColumnType("integer");

                    b.Property<string>("Path")
                        .HasColumnType("varchar(256)");

                    b.Property<int>("Sort")
                        .HasColumnType("integer");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("timestamp");

                    b.HasKey("Id");

                    b.ToTable("Permissions", (string)null);

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CreatedAt = new DateTime(2024, 4, 30, 18, 16, 5, 395, DateTimeKind.Local).AddTicks(9870),
                            Name = "系统",
                            Sort = 0,
                            UpdatedAt = new DateTime(2024, 4, 30, 18, 16, 5, 395, DateTimeKind.Local).AddTicks(9870)
                        },
                        new
                        {
                            Id = 2,
                            Controller = "Menu",
                            CreatedAt = new DateTime(2024, 4, 30, 18, 16, 5, 395, DateTimeKind.Local).AddTicks(9880),
                            Name = "菜单管理",
                            ParentId = 1,
                            Path = "",
                            Sort = 0,
                            UpdatedAt = new DateTime(2024, 4, 30, 18, 16, 5, 395, DateTimeKind.Local).AddTicks(9880)
                        },
                        new
                        {
                            Id = 3,
                            Controller = "Menu",
                            CreatedAt = new DateTime(2024, 4, 30, 18, 16, 5, 395, DateTimeKind.Local).AddTicks(9880),
                            Method = "GET",
                            Name = "查看",
                            ParentId = 2,
                            Path = "api/auth/menu",
                            Sort = 0,
                            UpdatedAt = new DateTime(2024, 4, 30, 18, 16, 5, 395, DateTimeKind.Local).AddTicks(9880)
                        },
                        new
                        {
                            Id = 4,
                            Controller = "Menu",
                            CreatedAt = new DateTime(2024, 4, 30, 18, 16, 5, 395, DateTimeKind.Local).AddTicks(9880),
                            Method = "CREATE",
                            Name = "创建",
                            ParentId = 2,
                            Path = "api/auth/menu",
                            Sort = 0,
                            UpdatedAt = new DateTime(2024, 4, 30, 18, 16, 5, 395, DateTimeKind.Local).AddTicks(9880)
                        },
                        new
                        {
                            Id = 5,
                            Controller = "Menu",
                            CreatedAt = new DateTime(2024, 4, 30, 18, 16, 5, 395, DateTimeKind.Local).AddTicks(9880),
                            Method = "UPDATE",
                            Name = "修改",
                            ParentId = 2,
                            Path = "api/auth/menu/{id}",
                            Sort = 0,
                            UpdatedAt = new DateTime(2024, 4, 30, 18, 16, 5, 395, DateTimeKind.Local).AddTicks(9880)
                        },
                        new
                        {
                            Id = 6,
                            Controller = "Menu",
                            CreatedAt = new DateTime(2024, 4, 30, 18, 16, 5, 395, DateTimeKind.Local).AddTicks(9890),
                            Method = "DELETE",
                            Name = "删除",
                            ParentId = 2,
                            Path = "api/auth/menu/{id}",
                            Sort = 0,
                            UpdatedAt = new DateTime(2024, 4, 30, 18, 16, 5, 395, DateTimeKind.Local).AddTicks(9890)
                        },
                        new
                        {
                            Id = 7,
                            Controller = "Permission",
                            CreatedAt = new DateTime(2024, 4, 30, 18, 16, 5, 395, DateTimeKind.Local).AddTicks(9890),
                            Name = "权限管理",
                            ParentId = 1,
                            Path = "",
                            Sort = 0,
                            UpdatedAt = new DateTime(2024, 4, 30, 18, 16, 5, 395, DateTimeKind.Local).AddTicks(9890)
                        },
                        new
                        {
                            Id = 8,
                            Controller = "Permission",
                            CreatedAt = new DateTime(2024, 4, 30, 18, 16, 5, 395, DateTimeKind.Local).AddTicks(9890),
                            Method = "GET",
                            Name = "查看",
                            ParentId = 7,
                            Path = "api/auth/permission",
                            Sort = 0,
                            UpdatedAt = new DateTime(2024, 4, 30, 18, 16, 5, 395, DateTimeKind.Local).AddTicks(9890)
                        },
                        new
                        {
                            Id = 9,
                            Controller = "Permission",
                            CreatedAt = new DateTime(2024, 4, 30, 18, 16, 5, 395, DateTimeKind.Local).AddTicks(9890),
                            Method = "CREATE",
                            Name = "创建",
                            ParentId = 7,
                            Path = "api/auth/permission",
                            Sort = 0,
                            UpdatedAt = new DateTime(2024, 4, 30, 18, 16, 5, 395, DateTimeKind.Local).AddTicks(9890)
                        },
                        new
                        {
                            Id = 10,
                            Controller = "Permission",
                            CreatedAt = new DateTime(2024, 4, 30, 18, 16, 5, 395, DateTimeKind.Local).AddTicks(9890),
                            Method = "UPDATE",
                            Name = "修改",
                            ParentId = 7,
                            Path = "api/auth/permission/{id}",
                            Sort = 0,
                            UpdatedAt = new DateTime(2024, 4, 30, 18, 16, 5, 395, DateTimeKind.Local).AddTicks(9890)
                        },
                        new
                        {
                            Id = 11,
                            Controller = "Permission",
                            CreatedAt = new DateTime(2024, 4, 30, 18, 16, 5, 395, DateTimeKind.Local).AddTicks(9890),
                            Method = "DELETE",
                            Name = "删除",
                            ParentId = 7,
                            Path = "api/auth/permission/{id}",
                            Sort = 0,
                            UpdatedAt = new DateTime(2024, 4, 30, 18, 16, 5, 395, DateTimeKind.Local).AddTicks(9890)
                        },
                        new
                        {
                            Id = 12,
                            Controller = "Role",
                            CreatedAt = new DateTime(2024, 4, 30, 18, 16, 5, 395, DateTimeKind.Local).AddTicks(9890),
                            Name = "角色管理",
                            ParentId = 1,
                            Path = "",
                            Sort = 0,
                            UpdatedAt = new DateTime(2024, 4, 30, 18, 16, 5, 395, DateTimeKind.Local).AddTicks(9890)
                        },
                        new
                        {
                            Id = 13,
                            Controller = "Role",
                            CreatedAt = new DateTime(2024, 4, 30, 18, 16, 5, 395, DateTimeKind.Local).AddTicks(9900),
                            Method = "GET",
                            Name = "查看",
                            ParentId = 12,
                            Path = "api/auth/roles",
                            Sort = 0,
                            UpdatedAt = new DateTime(2024, 4, 30, 18, 16, 5, 395, DateTimeKind.Local).AddTicks(9900)
                        },
                        new
                        {
                            Id = 14,
                            Controller = "Role",
                            CreatedAt = new DateTime(2024, 4, 30, 18, 16, 5, 395, DateTimeKind.Local).AddTicks(9900),
                            Method = "CREATE",
                            Name = "创建",
                            ParentId = 12,
                            Path = "api/auth/role",
                            Sort = 0,
                            UpdatedAt = new DateTime(2024, 4, 30, 18, 16, 5, 395, DateTimeKind.Local).AddTicks(9900)
                        },
                        new
                        {
                            Id = 15,
                            Controller = "Role",
                            CreatedAt = new DateTime(2024, 4, 30, 18, 16, 5, 395, DateTimeKind.Local).AddTicks(9900),
                            Method = "UPDATE",
                            Name = "修改",
                            ParentId = 12,
                            Path = "api/auth/role/{id}",
                            Sort = 0,
                            UpdatedAt = new DateTime(2024, 4, 30, 18, 16, 5, 395, DateTimeKind.Local).AddTicks(9900)
                        },
                        new
                        {
                            Id = 16,
                            Controller = "Role",
                            CreatedAt = new DateTime(2024, 4, 30, 18, 16, 5, 395, DateTimeKind.Local).AddTicks(9900),
                            Method = "DELETE",
                            Name = "删除",
                            ParentId = 12,
                            Path = "api/auth/role/{id}",
                            Sort = 0,
                            UpdatedAt = new DateTime(2024, 4, 30, 18, 16, 5, 395, DateTimeKind.Local).AddTicks(9900)
                        });
                });

            modelBuilder.Entity("LogisticsManagementSystem.Domain.Role", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("text");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("timestamp");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<string>("Slug")
                        .HasColumnType("varchar(256)");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("timestamp");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex");

                    b.ToTable("Roles", (string)null);

                    b.HasData(
                        new
                        {
                            Id = new Guid("10bd099e-9753-4962-b4e8-9ecb6965677a"),
                            CreatedAt = new DateTime(2024, 4, 30, 18, 16, 5, 395, DateTimeKind.Local).AddTicks(9810),
                            Name = "Admin",
                            NormalizedName = "ADMIN",
                            UpdatedAt = new DateTime(2024, 4, 30, 18, 16, 5, 395, DateTimeKind.Local).AddTicks(9810)
                        });
                });

            modelBuilder.Entity("LogisticsManagementSystem.Domain.RoleClaim", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("text");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("text");

                    b.Property<Guid>("RoleId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("RoleClaim", (string)null);
                });

            modelBuilder.Entity("LogisticsManagementSystem.Domain.User", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("integer");

                    b.Property<string>("Avatar")
                        .HasColumnType("varchar(256)");

                    b.Property<Guid?>("CompanyId")
                        .HasColumnType("uuid");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("text");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("timestamp");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("boolean");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("boolean");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("varchar(256)");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("text");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("text");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("boolean");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("text");

                    b.Property<int>("TokenVersion")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasDefaultValue(0);

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("boolean");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("timestamp");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.HasKey("Id");

                    b.HasIndex("CompanyId");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex");

                    b.ToTable("Users", (string)null);

                    b.HasData(
                        new
                        {
                            Id = new Guid("b1882f2a-2473-413c-9563-ac900741c8f0"),
                            AccessFailedCount = 0,
                            Avatar = "http://124.222.5.145/avatar/ogrwRJqXMXSGHuGIC3JQ52HOdLpyME.avif",
                            ConcurrencyStamp = "6bcef967-c50a-4573-8575-4f7e75a6c426",
                            CreatedAt = new DateTime(2024, 4, 30, 18, 16, 5, 395, DateTimeKind.Local).AddTicks(9690),
                            Email = "402832626@qq.com",
                            EmailConfirmed = false,
                            LockoutEnabled = true,
                            Name = "Cheung",
                            NormalizedUserName = "CHEUNG",
                            PasswordHash = "AQAAAAIAAYagAAAAEMSuTV5vdkw0LBQICgUF2Rl25Yu9TiFhrhatAn9JCyrSnMe/tjJRRdXj/nkltAGwiQ==",
                            PhoneNumber = "",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "373BQTFYVCP7RJ3VEPFAOSDBMBDQIEH4",
                            TokenVersion = 0,
                            TwoFactorEnabled = false,
                            UpdatedAt = new DateTime(2024, 4, 30, 18, 16, 5, 395, DateTimeKind.Local).AddTicks(9720),
                            UserName = "Cheung"
                        });
                });

            modelBuilder.Entity("LogisticsManagementSystem.Domain.UserClaim", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("text");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("text");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("UserClaim", (string)null);
                });

            modelBuilder.Entity("LogisticsManagementSystem.Domain.UserLogin", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("text");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("text");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("text");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("UserLogin", (string)null);
                });

            modelBuilder.Entity("LogisticsManagementSystem.Domain.UserRole", b =>
                {
                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("RoleId")
                        .HasColumnType("uuid");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("UserRole", (string)null);

                    b.HasData(
                        new
                        {
                            UserId = new Guid("b1882f2a-2473-413c-9563-ac900741c8f0"),
                            RoleId = new Guid("10bd099e-9753-4962-b4e8-9ecb6965677a")
                        });
                });

            modelBuilder.Entity("LogisticsManagementSystem.Domain.UserToken", b =>
                {
                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.Property<string>("Value")
                        .HasColumnType("text");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("UserToken", (string)null);
                });

            modelBuilder.Entity("LogisticsManagementSystem.Domain.MenuRole", b =>
                {
                    b.HasOne("LogisticsManagementSystem.Domain.Menu", "Menu")
                        .WithMany()
                        .HasForeignKey("MenuId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("LogisticsManagementSystem.Domain.Role", "Role")
                        .WithMany("MenuRoles")
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Menu");

                    b.Navigation("Role");
                });

            modelBuilder.Entity("LogisticsManagementSystem.Domain.RoleClaim", b =>
                {
                    b.HasOne("LogisticsManagementSystem.Domain.Role", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("LogisticsManagementSystem.Domain.User", b =>
                {
                    b.HasOne("LogisticsManagementSystem.Domain.Company", "Company")
                        .WithMany()
                        .HasForeignKey("CompanyId");

                    b.Navigation("Company");
                });

            modelBuilder.Entity("LogisticsManagementSystem.Domain.UserClaim", b =>
                {
                    b.HasOne("LogisticsManagementSystem.Domain.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("LogisticsManagementSystem.Domain.UserLogin", b =>
                {
                    b.HasOne("LogisticsManagementSystem.Domain.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("LogisticsManagementSystem.Domain.UserRole", b =>
                {
                    b.HasOne("LogisticsManagementSystem.Domain.Role", "Role")
                        .WithMany("UserRoles")
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("LogisticsManagementSystem.Domain.User", "User")
                        .WithMany("UserRoles")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Role");

                    b.Navigation("User");
                });

            modelBuilder.Entity("LogisticsManagementSystem.Domain.UserToken", b =>
                {
                    b.HasOne("LogisticsManagementSystem.Domain.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("LogisticsManagementSystem.Domain.Role", b =>
                {
                    b.Navigation("MenuRoles");

                    b.Navigation("UserRoles");
                });

            modelBuilder.Entity("LogisticsManagementSystem.Domain.User", b =>
                {
                    b.Navigation("UserRoles");
                });
#pragma warning restore 612, 618
        }
    }
}
